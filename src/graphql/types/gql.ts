/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
    "\n  query trendingAnime {\n    Page(page: 1, perPage: 10) {\n      media(sort: TRENDING_DESC, type: ANIME) {\n        id\n        __typename\n        title {\n          __typename\n          english\n          romaji\n        }\n        coverImage {\n          __typename\n          large\n        }\n      }\n    }\n  }\n": types.TrendingAnimeDocument,
    "\n  \n  \n  query animeFormat(\n    $page: Int\n    $perPage: Int\n    $isAdult: Boolean = false\n    $format: [MediaFormat]\n  ) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(\n        type: ANIME\n        sort: POPULARITY_DESC\n        isAdult: $isAdult\n        format_in: $format\n      ) {\n        ...mediafields\n      }\n    }\n  }\n": types.AnimeFormatDocument,
    "\n  query AnimeListOf5 {\n    # Fetch top airing anime\n    topAiringAnime5: Page(page: 1, perPage: 5) {\n      media(\n        sort: POPULARITY_DESC\n        type: ANIME\n        status: RELEASING\n        isAdult: false\n      ) {\n        ...animeListItem\n      }\n    }\n\n    # Fetch most favorited anime\n    mostFavoritedAnime5: Page(page: 1, perPage: 5) {\n      media(sort: FAVOURITES_DESC, type: ANIME, isAdult: false) {\n        ...animeListItem\n      }\n    }\n\n    # Fetch latest completed anime\n    latestCompletedAnime5: Page(page: 1, perPage: 5) {\n      media(\n        sort: END_DATE_DESC\n        type: ANIME\n        status: FINISHED\n        isAdult: false\n      ) {\n        ...animeListItem\n      }\n    }\n\n    # Fetch Most popular anime\n    mostPopularAnime5: Page(page: 1, perPage: 5) {\n      media(type: ANIME, sort: POPULARITY_DESC, isAdult: false) {\n        ...animeListItem\n      }\n    }\n  }\n  \n": types.AnimeListOf5Document,
    "\n  \n  query getAnimeById($mediaId: Int) {\n    Media(id: $mediaId) {\n      id\n      __typename\n      title {\n        __typename\n        english\n        romaji\n      }\n      description\n      coverImage {\n        __typename\n        extraLarge\n        large\n      }\n      type\n      episodes\n      genres\n      status\n      duration\n      updatedAt\n      trending\n      format\n      averageScore\n      startDate {\n        __typename\n        day\n        month\n        year\n      }\n      endDate {\n        __typename\n        day\n        month\n        year\n      }\n      relations {\n        __typename\n        edges {\n          __typename\n          relationType\n          node {\n            __typename\n            ...mediafields\n          }\n        }\n      }\n      studios {\n        __typename\n        edges {\n          __typename\n          node {\n            __typename\n            name\n          }\n        }\n      }\n      recommendations {\n        __typename\n        edges {\n          __typename\n          node {\n            __typename\n            id\n            mediaRecommendation {\n              __typename\n              ...mediafields\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetAnimeByIdDocument,
    "\n  fragment animeListItem on Media {\n    id\n    __typename\n    title {\n      __typename\n      english\n      romaji\n    }\n    coverImage {\n      __typename\n      large\n      medium\n    }\n    episodes\n    format\n  }\n": types.AnimeListItemFragmentDoc,
    "\n  fragment mediafields on Media {\n    id\n    __typename\n    title {\n      __typename\n      english\n      romaji\n    }\n    coverImage {\n      __typename\n      large\n      medium\n    }\n    duration\n    status\n    episodes\n    format\n  }\n": types.MediafieldsFragmentDoc,
    "\n  fragment pageInfo on PageInfo {\n    __typename\n    total\n    currentPage\n    lastPage\n    hasNextPage\n  }\n": types.PageInfoFragmentDoc,
    "\n  \n  \n  query genre(\n    $page: Int = 1\n    $perPage: Int\n    $type: MediaType = ANIME\n    $genres: [String] = [\"Action\"]\n    $isAdult: Boolean = false\n  ) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(\n        sort: FAVOURITES_DESC\n        genre_in: $genres\n        type: $type\n        isAdult: $isAdult\n      ) {\n        ...mediafields\n      }\n    }\n  }\n": types.GenreDocument,
    "\n  query genreCollection {\n    GenreCollection\n  }\n": types.GenreCollectionDocument,
    "\n  \n  \n  query latestCompleted($page: Int, $perPage: Int) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(\n        sort: END_DATE_DESC\n        type: ANIME\n        status: FINISHED\n        isAdult: false\n      ) {\n        ...mediafields\n      }\n    }\n  }\n": types.LatestCompletedDocument,
    "\n  \n  \n  query mostFavourites($page: Int, $perPage: Int) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(sort: FAVOURITES_DESC, type: ANIME, isAdult: false) {\n        ...mediafields\n      }\n    }\n  }\n": types.MostFavouritesDocument,
    "\n  \n  \n  query mostPopular($page: Int, $perPage: Int) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(type: ANIME, sort: POPULARITY_DESC, isAdult:false) {\n        ...mediafields\n      }\n    }\n  }\n": types.MostPopularDocument,
    "\n  \n  query NewAnime12($page: Int, $perPage: Int) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      media(\n        type: ANIME\n        status: RELEASING\n        sort: START_DATE_DESC\n        isAdult: false\n      ) {\n        __typename\n        ...animeListItem\n        duration\n      }\n    }\n  }\n": types.NewAnime12Document,
    "\n  \n  \n  query producer(\n    $page: Int = 1\n    $perPage: Int\n    $search: String\n    $sort: [StudioSort] = [SEARCH_MATCH]\n  ) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      studios(search: $search, sort: $sort) {\n        id\n        name\n        isAnimationStudio\n        media(sort: POPULARITY_DESC) {\n          nodes {\n            ...mediafields\n          }\n        }\n      }\n    }\n  }\n": types.ProducerDocument,
    "\n  \n  query SearchAnime($search: String, $type: MediaType!) {\n    Media(search: $search, type: $type) {\n      ...mediafields\n      relations {\n        nodes {\n          ...mediafields\n        }\n      }\n    }\n  }\n": types.SearchAnimeDocument,
    "\n  query spotlightAnime {\n    Page(page: 1, perPage: 10) {\n      media(sort: POPULARITY_DESC, type: ANIME, isAdult: false) {\n        id\n        __typename\n        title {\n          __typename\n          romaji\n          english\n        }\n        bannerImage\n      }\n    }\n  }\n": types.SpotlightAnimeDocument,
    "\n  \n  \n  query topAiring($page: Int, $perPage: Int) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(\n        sort: POPULARITY_DESC\n        type: ANIME\n        status: RELEASING\n        isAdult: false\n      ) {\n        ...mediafields\n      }\n    }\n  }\n": types.TopAiringDocument,
    "\n  \n  \n  query topHundred(\n    $page: Int\n    $perPage: Int\n    $type: MediaType = ANIME\n    $sort: [MediaSort] = [SCORE_DESC]\n  ) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(type: ANIME, sort: $sort, isAdult: false) {\n        ...mediafields\n      }\n    }\n  }\n": types.TopHundredDocument,
    "\n  \n  \n  query upcoming(\n    $page: Int\n    $perPage: Int\n    $type: MediaType = ANIME\n    $sort: [MediaSort] = POPULARITY_DESC\n    $season: MediaSeason\n    $seasonYear: Int\n    $isAdult:Boolean =  false\n  ) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(\n        type: $type\n        isAdult: $isAdult\n        sort: $sort\n        season: $season\n        seasonYear: $seasonYear\n      ) {\n        ...mediafields\n      }\n    }\n  }\n": types.UpcomingDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query trendingAnime {\n    Page(page: 1, perPage: 10) {\n      media(sort: TRENDING_DESC, type: ANIME) {\n        id\n        __typename\n        title {\n          __typename\n          english\n          romaji\n        }\n        coverImage {\n          __typename\n          large\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query trendingAnime {\n    Page(page: 1, perPage: 10) {\n      media(sort: TRENDING_DESC, type: ANIME) {\n        id\n        __typename\n        title {\n          __typename\n          english\n          romaji\n        }\n        coverImage {\n          __typename\n          large\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  \n  query animeFormat(\n    $page: Int\n    $perPage: Int\n    $isAdult: Boolean = false\n    $format: [MediaFormat]\n  ) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(\n        type: ANIME\n        sort: POPULARITY_DESC\n        isAdult: $isAdult\n        format_in: $format\n      ) {\n        ...mediafields\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  \n  query animeFormat(\n    $page: Int\n    $perPage: Int\n    $isAdult: Boolean = false\n    $format: [MediaFormat]\n  ) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(\n        type: ANIME\n        sort: POPULARITY_DESC\n        isAdult: $isAdult\n        format_in: $format\n      ) {\n        ...mediafields\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AnimeListOf5 {\n    # Fetch top airing anime\n    topAiringAnime5: Page(page: 1, perPage: 5) {\n      media(\n        sort: POPULARITY_DESC\n        type: ANIME\n        status: RELEASING\n        isAdult: false\n      ) {\n        ...animeListItem\n      }\n    }\n\n    # Fetch most favorited anime\n    mostFavoritedAnime5: Page(page: 1, perPage: 5) {\n      media(sort: FAVOURITES_DESC, type: ANIME, isAdult: false) {\n        ...animeListItem\n      }\n    }\n\n    # Fetch latest completed anime\n    latestCompletedAnime5: Page(page: 1, perPage: 5) {\n      media(\n        sort: END_DATE_DESC\n        type: ANIME\n        status: FINISHED\n        isAdult: false\n      ) {\n        ...animeListItem\n      }\n    }\n\n    # Fetch Most popular anime\n    mostPopularAnime5: Page(page: 1, perPage: 5) {\n      media(type: ANIME, sort: POPULARITY_DESC, isAdult: false) {\n        ...animeListItem\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query AnimeListOf5 {\n    # Fetch top airing anime\n    topAiringAnime5: Page(page: 1, perPage: 5) {\n      media(\n        sort: POPULARITY_DESC\n        type: ANIME\n        status: RELEASING\n        isAdult: false\n      ) {\n        ...animeListItem\n      }\n    }\n\n    # Fetch most favorited anime\n    mostFavoritedAnime5: Page(page: 1, perPage: 5) {\n      media(sort: FAVOURITES_DESC, type: ANIME, isAdult: false) {\n        ...animeListItem\n      }\n    }\n\n    # Fetch latest completed anime\n    latestCompletedAnime5: Page(page: 1, perPage: 5) {\n      media(\n        sort: END_DATE_DESC\n        type: ANIME\n        status: FINISHED\n        isAdult: false\n      ) {\n        ...animeListItem\n      }\n    }\n\n    # Fetch Most popular anime\n    mostPopularAnime5: Page(page: 1, perPage: 5) {\n      media(type: ANIME, sort: POPULARITY_DESC, isAdult: false) {\n        ...animeListItem\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  query getAnimeById($mediaId: Int) {\n    Media(id: $mediaId) {\n      id\n      __typename\n      title {\n        __typename\n        english\n        romaji\n      }\n      description\n      coverImage {\n        __typename\n        extraLarge\n        large\n      }\n      type\n      episodes\n      genres\n      status\n      duration\n      updatedAt\n      trending\n      format\n      averageScore\n      startDate {\n        __typename\n        day\n        month\n        year\n      }\n      endDate {\n        __typename\n        day\n        month\n        year\n      }\n      relations {\n        __typename\n        edges {\n          __typename\n          relationType\n          node {\n            __typename\n            ...mediafields\n          }\n        }\n      }\n      studios {\n        __typename\n        edges {\n          __typename\n          node {\n            __typename\n            name\n          }\n        }\n      }\n      recommendations {\n        __typename\n        edges {\n          __typename\n          node {\n            __typename\n            id\n            mediaRecommendation {\n              __typename\n              ...mediafields\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  query getAnimeById($mediaId: Int) {\n    Media(id: $mediaId) {\n      id\n      __typename\n      title {\n        __typename\n        english\n        romaji\n      }\n      description\n      coverImage {\n        __typename\n        extraLarge\n        large\n      }\n      type\n      episodes\n      genres\n      status\n      duration\n      updatedAt\n      trending\n      format\n      averageScore\n      startDate {\n        __typename\n        day\n        month\n        year\n      }\n      endDate {\n        __typename\n        day\n        month\n        year\n      }\n      relations {\n        __typename\n        edges {\n          __typename\n          relationType\n          node {\n            __typename\n            ...mediafields\n          }\n        }\n      }\n      studios {\n        __typename\n        edges {\n          __typename\n          node {\n            __typename\n            name\n          }\n        }\n      }\n      recommendations {\n        __typename\n        edges {\n          __typename\n          node {\n            __typename\n            id\n            mediaRecommendation {\n              __typename\n              ...mediafields\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment animeListItem on Media {\n    id\n    __typename\n    title {\n      __typename\n      english\n      romaji\n    }\n    coverImage {\n      __typename\n      large\n      medium\n    }\n    episodes\n    format\n  }\n"): (typeof documents)["\n  fragment animeListItem on Media {\n    id\n    __typename\n    title {\n      __typename\n      english\n      romaji\n    }\n    coverImage {\n      __typename\n      large\n      medium\n    }\n    episodes\n    format\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment mediafields on Media {\n    id\n    __typename\n    title {\n      __typename\n      english\n      romaji\n    }\n    coverImage {\n      __typename\n      large\n      medium\n    }\n    duration\n    status\n    episodes\n    format\n  }\n"): (typeof documents)["\n  fragment mediafields on Media {\n    id\n    __typename\n    title {\n      __typename\n      english\n      romaji\n    }\n    coverImage {\n      __typename\n      large\n      medium\n    }\n    duration\n    status\n    episodes\n    format\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment pageInfo on PageInfo {\n    __typename\n    total\n    currentPage\n    lastPage\n    hasNextPage\n  }\n"): (typeof documents)["\n  fragment pageInfo on PageInfo {\n    __typename\n    total\n    currentPage\n    lastPage\n    hasNextPage\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  \n  query genre(\n    $page: Int = 1\n    $perPage: Int\n    $type: MediaType = ANIME\n    $genres: [String] = [\"Action\"]\n    $isAdult: Boolean = false\n  ) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(\n        sort: FAVOURITES_DESC\n        genre_in: $genres\n        type: $type\n        isAdult: $isAdult\n      ) {\n        ...mediafields\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  \n  query genre(\n    $page: Int = 1\n    $perPage: Int\n    $type: MediaType = ANIME\n    $genres: [String] = [\"Action\"]\n    $isAdult: Boolean = false\n  ) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(\n        sort: FAVOURITES_DESC\n        genre_in: $genres\n        type: $type\n        isAdult: $isAdult\n      ) {\n        ...mediafields\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query genreCollection {\n    GenreCollection\n  }\n"): (typeof documents)["\n  query genreCollection {\n    GenreCollection\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  \n  query latestCompleted($page: Int, $perPage: Int) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(\n        sort: END_DATE_DESC\n        type: ANIME\n        status: FINISHED\n        isAdult: false\n      ) {\n        ...mediafields\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  \n  query latestCompleted($page: Int, $perPage: Int) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(\n        sort: END_DATE_DESC\n        type: ANIME\n        status: FINISHED\n        isAdult: false\n      ) {\n        ...mediafields\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  \n  query mostFavourites($page: Int, $perPage: Int) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(sort: FAVOURITES_DESC, type: ANIME, isAdult: false) {\n        ...mediafields\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  \n  query mostFavourites($page: Int, $perPage: Int) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(sort: FAVOURITES_DESC, type: ANIME, isAdult: false) {\n        ...mediafields\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  \n  query mostPopular($page: Int, $perPage: Int) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(type: ANIME, sort: POPULARITY_DESC, isAdult:false) {\n        ...mediafields\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  \n  query mostPopular($page: Int, $perPage: Int) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(type: ANIME, sort: POPULARITY_DESC, isAdult:false) {\n        ...mediafields\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  query NewAnime12($page: Int, $perPage: Int) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      media(\n        type: ANIME\n        status: RELEASING\n        sort: START_DATE_DESC\n        isAdult: false\n      ) {\n        __typename\n        ...animeListItem\n        duration\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  query NewAnime12($page: Int, $perPage: Int) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      media(\n        type: ANIME\n        status: RELEASING\n        sort: START_DATE_DESC\n        isAdult: false\n      ) {\n        __typename\n        ...animeListItem\n        duration\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  \n  query producer(\n    $page: Int = 1\n    $perPage: Int\n    $search: String\n    $sort: [StudioSort] = [SEARCH_MATCH]\n  ) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      studios(search: $search, sort: $sort) {\n        id\n        name\n        isAnimationStudio\n        media(sort: POPULARITY_DESC) {\n          nodes {\n            ...mediafields\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  \n  query producer(\n    $page: Int = 1\n    $perPage: Int\n    $search: String\n    $sort: [StudioSort] = [SEARCH_MATCH]\n  ) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      studios(search: $search, sort: $sort) {\n        id\n        name\n        isAnimationStudio\n        media(sort: POPULARITY_DESC) {\n          nodes {\n            ...mediafields\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  query SearchAnime($search: String, $type: MediaType!) {\n    Media(search: $search, type: $type) {\n      ...mediafields\n      relations {\n        nodes {\n          ...mediafields\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  query SearchAnime($search: String, $type: MediaType!) {\n    Media(search: $search, type: $type) {\n      ...mediafields\n      relations {\n        nodes {\n          ...mediafields\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query spotlightAnime {\n    Page(page: 1, perPage: 10) {\n      media(sort: POPULARITY_DESC, type: ANIME, isAdult: false) {\n        id\n        __typename\n        title {\n          __typename\n          romaji\n          english\n        }\n        bannerImage\n      }\n    }\n  }\n"): (typeof documents)["\n  query spotlightAnime {\n    Page(page: 1, perPage: 10) {\n      media(sort: POPULARITY_DESC, type: ANIME, isAdult: false) {\n        id\n        __typename\n        title {\n          __typename\n          romaji\n          english\n        }\n        bannerImage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  \n  query topAiring($page: Int, $perPage: Int) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(\n        sort: POPULARITY_DESC\n        type: ANIME\n        status: RELEASING\n        isAdult: false\n      ) {\n        ...mediafields\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  \n  query topAiring($page: Int, $perPage: Int) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(\n        sort: POPULARITY_DESC\n        type: ANIME\n        status: RELEASING\n        isAdult: false\n      ) {\n        ...mediafields\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  \n  query topHundred(\n    $page: Int\n    $perPage: Int\n    $type: MediaType = ANIME\n    $sort: [MediaSort] = [SCORE_DESC]\n  ) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(type: ANIME, sort: $sort, isAdult: false) {\n        ...mediafields\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  \n  query topHundred(\n    $page: Int\n    $perPage: Int\n    $type: MediaType = ANIME\n    $sort: [MediaSort] = [SCORE_DESC]\n  ) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(type: ANIME, sort: $sort, isAdult: false) {\n        ...mediafields\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  \n  query upcoming(\n    $page: Int\n    $perPage: Int\n    $type: MediaType = ANIME\n    $sort: [MediaSort] = POPULARITY_DESC\n    $season: MediaSeason\n    $seasonYear: Int\n    $isAdult:Boolean =  false\n  ) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(\n        type: $type\n        isAdult: $isAdult\n        sort: $sort\n        season: $season\n        seasonYear: $seasonYear\n      ) {\n        ...mediafields\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  \n  query upcoming(\n    $page: Int\n    $perPage: Int\n    $type: MediaType = ANIME\n    $sort: [MediaSort] = POPULARITY_DESC\n    $season: MediaSeason\n    $seasonYear: Int\n    $isAdult:Boolean =  false\n  ) {\n    Page(page: $page, perPage: $perPage) {\n      __typename\n      pageInfo {\n        ...pageInfo\n      }\n      media(\n        type: $type\n        isAdult: $isAdult\n        sort: $sort\n        season: $season\n        seasonYear: $seasonYear\n      ) {\n        ...mediafields\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;